<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming
</name>
</assembly>
<members>
<member name="T:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunsch`1">
 <summary>
 Needleman-Wunsch Algorithm
 Bioinformatics 1, WS 15/16
 Dr. Kay Nieselt and Alexander Seitz
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunsch`1.traceback(System.Collections.Generic.Stack{`0},System.Collections.Generic.Stack{`0},System.Int32,System.Int32)">
 <summary>
     
	 * this function is called for the first time with two empty stacks
	 * and the end indices of the matrix
	 * 
	 * the function computes a traceback over the matrix, it calls itself recursively
	 * for each sequence, it pushes the aligned character (a,c,g,t or -)
	 * on a stack (use java.util.Stack with the function push()) 
	 * 
	 
 </summary>
 <param name="s1"></param>
 <param name="s2"></param>
 <param name="i"></param>
 <param name="j"></param>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunsch`1.compute">
 <summary>
 computes the matrix for the Needleman-Wunsch Algorithm
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunsch`1.fillTracebackMatrix(System.Int32,System.Int32,System.Int32)">
 <summary>
 return the maximizing cell(s)
 1 , if the maximizing cell is the upper cell
 2 , if the maximizing cell is the left-upper cell
 4 , if the maximizing cell is the left cell
 if there are more than one maximizing cells, the values are summed up
 </summary>
 <param name="upperLeft"> </param>
 <param name="left"> </param>
 <param name="upper"> </param>
 <returns> code for the maximizing cell(s) </returns>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunsch`1.writeAlignment(System.String,System.Boolean)">
 <summary>
 This funktion provide a easy way to write a computed alignment into a fasta file </summary>
 <param name="outFile"> </param>
 <param name="single"> </param>
</member>
<member name="T:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1">
 <summary>
 Base class for the Needleman-Wunsch Algorithm
 Bioinformatics 1, WS 15/16
 Dr. Kay Nieselt and Alexander Seitz
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.NumberOfAlignments">
 <summary>
 get numberOfAlignments </summary>
 <returns> numberOfAlignments </returns>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.GapPenalty">
 <summary>
 get gap open penalty </summary>
 <returns> gap open penalty </returns>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.MatchScore">
 <summary>
 get match score </summary>
 <returns> match score </returns>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.MismatchScore">
 <summary>
 get mismatch score </summary>
 <returns> mismatch score </returns>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.Sequence1">
 <summary>
 get sequence 1 </summary>
 <return>  sequence 1 </return>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.Sequence2">
 <summary>
 get sequence 2cted int max (int a, int b, int c) {
    return Math.max(a, Math.max(b, c)); </summary>
 <return> sequence 2 </return>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.getAligned1(System.Int32)">
 <summary>
 get aligned version of sequence 1 </summary>
 <param name="i"> </param>
 <returns>  aligned sequence 1 </returns>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.addAligned1(`0[])">
 <summary>
 set aligned sequence 1 </summary>
 <param name="aligned1"> </param>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.getAligned2(System.Int32)">
 <summary>
 get aligned version of sequence 2 </summary>
 <param name="i"> </param>
 <returns> aligned sequence 2 </returns>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.addAligned2(`0[])">
 <summary>
 set aligned sequence 2 </summary>
 <param name="aligned2"> </param>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.Score">
 <summary>
 get computed score </summary>
 <returns> score </returns>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.NeedlemanWunschArguments`1.match(`0,`0)">
 <summary>
 if char a is equal to char b
 return the match score
 else return mismatch score
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1">
 <summary>
 Generic Smith-Waterman computing kernel.(Smith-Waterman泛型化通用计算核心)
 </summary>
 <typeparam name="T"></typeparam>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.query">
 <summary>
 The first input string
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.subject">
 <summary>
 The second input String
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.queryLength">
 <summary>
 The lengths of the input strings
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.subjectLength">
 <summary>
 The lengths of the input strings
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.score">
 <summary>
 The score matrix.
 The true scores should be divided by the normalization factor.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.prevCells">
 <summary>
 The directions pointing to the cells that
 give the maximum score at the current cell.
 The first index is the column index.
 The second index is the row index.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.NORM_FACTOR">
 <summary>
 The normalization factor.
 To get the true score, divide the integer score used in computation
 by the normalization factor.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.MATCH_SCORE">
 <summary>
 The similarity function constants.
 They are amplified by the normalization factor to be integers.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.DR_LEFT">
 <summary>
 Constants of directions.
 Multiple directions are stored by bits.
 The zero direction is the starting point.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.similarity">
 <summary>
 Compute the similarity score of substitution: use a substitution matrix if the cost model
 The position of the first character is 1.
 A position of 0 represents a gap. 
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.#ctor(`0[],`0[],Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.ISimilarity{`0},Microsoft.VisualBasic.LevenshteinDistance.ToChar{`0})">
 <summary>
 Public Function <see cref="T:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.ISimilarity`1"/>(x As <typeparamref name="T"/>, y As <typeparamref name="T"/>) As <see cref="T:System.Int32"/>
 </summary>
 <param name="query"></param>
 <param name="subject"></param>
 <param name="similarity">Blosum matrix or motif similarity</param>
 <param name="asChar">Display alignment</param>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.__similarity(System.Int32,System.Int32)">
 <summary>
 </summary>
 <param name="i"> Position of the character in str1 </param>
 <param name="j"> Position of the character in str2 </param>
 <returns> Cost of substitution of the character in str1 by the one in str2 </returns>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.__buildMatrix">
 <summary>
 Build the score matrix using dynamic programming.
 Note: The indel scores must be negative. Otherwise, the
 part handling the first row and column has to be
 modified.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.MaxScore">
 <summary>
 Get the maximum value in the score matrix.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.AlignmentScore">
 <summary>
 Get the alignment score between the two input strings.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.printAlignments(System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Output the local alignments ending in the (i, j) cell.
 aligned1 and aligned2 are suffixes of final aligned strings
 found in backtracking before calling this function.
 Note: the strings are replicated at each recursive call.
 Use buffers or stacks to improve efficiency.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.traceback(System.Int32,System.Int32)">
 <summary>
 given the bottom right corner point trace back  the top left conrner.
  at entry: i, j hold bottom right (end of Aligment coords)
  at return:  hold top left (start of Alignment coords)
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.printAlignments">
 <summary>
 Output the local alignments with the maximum score.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.printDPMatrix">
 <summary>
 print the dynmaic programming matrix
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.GetDPMAT">
 <summary>
 Gets the dynmaic programming matrix
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.GetTraceback">
 <summary>
 See this overview on implementing Smith-Waterman, including trace back. At each location in the matrix you should check 4 things:
 
 If the location value equals the gap penalty plus the location above, up Is a valid move.
 If the location value equals the gap penalty plus the location left, left Is a valid move.
 If the location value equals the match value plus the location up And left, diagonal Is a valid move.
 If the location value Is 0, you're done.
 
 The first And second options correlate To inserting a gap In one Of the strings, And the third correlates To aligning two characters. 
 If multiple paths work, Then you have multiple possible alignments. 
 
 As the article states, the decision at that point depends largely On context (you have several options).
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.GSW`1.Matches(System.Double)">
 <summary>
 Return a set of Matches idenfied in Dynamic programming matrix. 
 A match is a pair of subsequences whose score is higher than the 
 preset scoreThreshold
 
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match">
 <summary>
  Match class defintion
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match.FromA">
 <summary>
 Returns the value of fromA.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match.FromB">
 <summary>
 Returns the value of fromB.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match.ToA">
 <summary>
 Returns the value of toA.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match.ToB">
 <summary>
 Returns the value of toB.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match.Score">
 <summary>
 Returns the value of score.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match.notOverlap(Microsoft.VisualBasic.DataMining.Framework.DynamicProgramming.Match)">
 <summary>
 Check whether this Match onecjt overlap with input Match m;
 return true if two objects do not overlap
 </summary>
 <param name="m"></param>
 <returns></returns>
</member>
</members>
</doc>
