<?xml version="1.0"?>
<doc>
<assembly>
<name>
System.Data.SQLite.Linq.DataMapping.Interface
</name>
</assembly>
<members>
<member name="T:System.Data.SQLite.Linq.DataMapping.Interface.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:System.Data.SQLite.Linq.DataMapping.Interface.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:System.Data.SQLite.Linq.DataMapping.Interface.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder">
 <summary>
 SQL query statement builder for the SELECT query.
 </summary>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.Escaping(System.String)">
 <summary>
 转码SQlite的分割字符 ( ' --> '' )
 </summary>
 <param name="fieldValue"></param>
 <returns></returns>
</member>
<member name="F:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.StringCompareMethods.Like">
 <summary>
 模糊匹配，大小写敏感的
 </summary>
 <remarks></remarks>
</member>
<member name="F:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.StringCompareMethods.Equals">
 <summary>
 相等，大小写敏感的
 </summary>
 <remarks></remarks>
</member>
<member name="F:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.StringCompareMethods.LikeWithCaseInsensitive">
 <summary>
 模糊匹配，大小写不敏感的
 </summary>
 <remarks></remarks>
</member>
<member name="F:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.StringCompareMethods.EqualsWithCaseInsensitive">
 <summary>
 字符串相等，大小写不敏感的
 </summary>
 <remarks></remarks>
</member>
<member name="T:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.FieldQueryBuilder">
 <summary>
 
 </summary>
 <param name="FieldName">数据库的表之中的列名称</param>
 <param name="Keyword">所需要进行查询的关键词</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.QueryByStringCompares``1(System.String,System.String,System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.StringCompareMethods)">
 <summary>
 
 </summary>
 <param name="Field"></param>
 <param name="value"></param>
 <param name="ComparedMethod">默认是使用最宽松的匹配条件</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.QueryByStringCompares(System.String,System.String,System.String,System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.StringCompareMethods)">
 <summary>
 
 </summary>
 <param name="Field"></param>
 <param name="value"></param>
 <param name="ComparedMethod">默认是使用最宽松的匹配条件</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.QueryBuilder.TrimmingSQLConserved(System.String)">
 <summary>
 将SQL语句之中的特殊字符进行移除
 </summary>
 <param name="str"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:System.Data.SQLite.Linq.DataMapping.Interface.Reflector">
 <summary>
 Provides the reflection operation extensions for the generic collection data to updates database.
 </summary>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Load``1(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.String)">
 <summary>
 Load the data from SELECT sql statement into a specific type collection.(Select语句加载数据)
 </summary>
 <typeparam name="T">The object type of the collection will be generated.</typeparam>
 <param name="DbTransaction"></param>
 <param name="SQL">SELECT SQL.(必须为Select语句)</param>
 <returns></returns>
 <remarks>
 主要解析<see cref="P:System.Data.Linq.Mapping.DataAttribute.Name"></see>，<see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey"></see>，
 <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.DbType"></see>这几个参数
 </remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Load(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.Type,System.String)">
 <summary>
 Load the data from SELECT sql statement into a specific type collection.(Select语句加载数据)
 </summary>
 <param name="DbTransaction"></param>
 <param name="SQL">SELECT SQL.(必须为Select语句)</param>
 <returns></returns>
 <remarks>
 主要解析<see cref="P:System.Data.Linq.Mapping.DataAttribute.Name"></see>，<see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey"></see>，
 <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.DbType"></see>这几个参数
 </remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Load(System.Data.Common.DbDataReader,System.Type)">
 <summary>
 Load all of the database in the database from a specific type information.
 </summary>
 <param name="DataSource"></param>
 <param name="TypeInfo">The type information of the database table.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Load``1(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure)">
 <summary>
 这个函数会一次性加载所有的数据
 </summary>
 <param name="DbTransaction"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Load(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.Type)">
 <summary>
 这个函数会一次性加载所有的数据
 </summary>
 <param name="DbTransaction"></param>
 <param name="SchemaInfo"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.__getSchemaCache``1">
 <summary>
 Loading the database table schema information using the reflection operation from the meta data storted in the type schema.
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.InternalGetSchemaCache(System.Type)">
 <summary>
 Loading the database table schema information using the reflection operation from the meta data storted in the type schema.
 </summary>
 <param name="type"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.GetTableName``1">
 <summary>
 Get the table name from the type schema.
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.GetTableName(System.Type)">
 <summary>
 Get the table name from the type schema.
 </summary>
 <param name="type"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.FlushData``1(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 批量删除数据
 </summary>
 <typeparam name="T"></typeparam>
 <param name="DbTransaction"></param>
 <param name="data"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.CommitData``1(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 批量更新数据
 </summary>
 <typeparam name="T"></typeparam>
 <param name="DbTransaction"></param>
 <param name="data"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Insert``1(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 批量添加新的数据
 </summary>
 <typeparam name="T"></typeparam>
 <param name="DbTransaction"></param>
 <param name="data"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Insert``1(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,``0)">
 <summary>
 INSERT INTO Table VALUES (value1, value2, ....)
 INSERT INTO table_name (col1, col2, ...) VALUES (value1, value2, ....)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="DbTransaction"></param>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.Insert``1(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.Data.SQLite.Linq.DataMapping.Interface.TableSchema,``0)">
 <summary>
 INSERT INTO Table VALUES (value1, value2, ....)
 INSERT INTO table_name (col1, col2, ...) VALUES (value1, value2, ....)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="DbTransaction"></param>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.Reflector.RecordExists(System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure,System.Object)">
 <summary>
 判断某一个实体对象是否存在于数据库之中
 </summary>
 <param name="DbTransaction"></param>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="T:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache">
 <summary>
 Cached for the database schema.
 </summary>
 <remarks></remarks>
</member>
<member name="P:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.DbType">
 <summary>
 integer(size)    仅容纳整数。在括号内规定数字的最大位数。
 int(size)
 smallint(size)
 tinyint(size)
 decimal(size,d)  容纳带有小数的数字。"size" 规定数字的最大位数。"d" 规定小数点右侧的最大位数。
 numeric(size,d)
 char(size)	     容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。在括号中规定字符串的长度。
 
 varchar(size)	 容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。在括号中规定字符串的最大长度。
 date(yyyymmdd)
 </summary>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateInsertSQL``1(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache[],``0,System.String)">
 <summary>
 INSERT INTO table_name (col1, col2, ...) VALUES (value1, value2, ....)
 </summary>
 <param name="SchemaCache"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateInsertSQL(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache[],System.Object,System.String)">
 <summary>
 INSERT INTO table_name (col1, col2, ...) VALUES (value1, value2, ....)
 </summary>
 <param name="SchemaCache"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.__getValue(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache,System.Object)">
 <summary>
 请注意，函数的返回值是带有数据库之中的间隔符号'的 
 </summary>
 <param name="p"></param>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateTableSQL(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache[],System.String)">
 <summary>
 CREATE TABLE TableName
 (
   col1 dbtype,
   col2 dbtype,
   col3 dbtype,
   ....
 )
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateTableSQL(System.Data.SQLite.Linq.DataMapping.Interface.TableDump[])">
 <summary>
 CREATE TABLE TableName
 (
   col1 dbtype,
   col2 dbtype,
   col3 dbtype,
   ....
 )
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateUpdateSQL``1(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache[],``0,System.String)">
 <summary>
 UPDATE table_name SET col = value WHERE col = colName
 </summary>
 <typeparam name="T"></typeparam>
 <param name="SchemaCache"></param>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateUpdateSQL(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache[],System.Object,System.String)">
 <summary>
 UPDATE table_name SET col = value WHERE col = colName
 </summary>
 <param name="SchemaCache"></param>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateDeleteSQL``1(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache[],``0,System.String)">
 <summary>
 DELETE FROM table_name WHERE col = value
 </summary>
 <typeparam name="T"></typeparam>
 <param name="SchemaCache"></param>
 <param name="obj"></param>
 <param name="TableName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache.CreateDeleteSQL(System.Data.SQLite.Linq.DataMapping.Interface.SchemaCache[],System.Object,System.String)">
 <summary>
 DELETE FROM table_name WHERE col = value
 </summary>
 <param name="SchemaCache"></param>
 <param name="obj"></param>
 <param name="TableName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:System.Data.SQLite.Linq.DataMapping.Interface.TableSchema.PrimaryKey">
 <summary>
 FieldName, DbType
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure">
 <summary>
 The API interface wrapper of the SQLite.(SQLite的存储引擎的接口)
 </summary>
 <remarks></remarks>
</member>
<member name="P:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.URL">
 <summary>
 Get the filename of the connected SQLite database file.(返回数据库文件的文件位置)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.CreateTableFor``1">
 <summary>
 Create a table in current database file for the specific table schema <para>T</para> . 
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.CreateTableFor(System.Type)">
 <summary>
 Create a table in current database file for the specific table schema <paramref name="TypeInfo"></paramref> . 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.ExistsTable(System.String)">
 <summary>
 Get a value to knows that wether the target table is exists in the database or not.
 (判断某一个数据表是否存在)
 </summary>
 <param name="TableName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.DeleteTable(System.Type)">
 <summary>
 Delete the target table.
 </summary>
 <param name="SchemaInfo"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.DeleteTable(System.String)">
 <summary>
 Delete the target table.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.ExistsTable(System.Type)">
 <summary>
 Get a value to knows that wether the target table is exists in the database or not.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.SQLiteCnn">
 <summary>
 SQLite 连接字符串
 </summary>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.CreateSQLTransaction(System.String)">
 <summary>
 Establishing the protocol of the SQLite connection between you program and the database file "<paramref name="url"></paramref>".
 </summary>
 <param name="url">The path of the SQLite database file.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.ExecuteTransaction(System.String[])">
 <summary>
 Batch execute a SQL collection as a SQL transaction. 
 </summary>
 <param name="SQL"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.Execute(System.String)">
 <summary>
 If the SQL is a SELECT statement, then this function returns a table object, if not then it returns nothing.
 </summary>
 <param name="SQL"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.Execute(System.String,System.String[])">
 <summary>
 If the SQL is a SELECT statement, then this function returns a table object, if not then it returns nothing.
 </summary>
 <param name="SQL"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.CreateSQLDump``1">
 <summary>
 Export the data dump in the format of a INSERT INTO SQL statement for transfer the data in this database into another database.
 </summary>
 <typeparam name="Table">The table schema of the target table which will be transfer.</typeparam>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.DbDump(System.String)">
 <summary>
 转储整个数据库
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:System.Data.SQLite.Linq.DataMapping.Interface.SQLProcedure.___SQLDump(System.Data.SQLite.Linq.DataMapping.Interface.TableDump[])">
 <summary>
 Export the data dump in the format of a INSERT INTO SQL statement for transfer the data in this database into another database.
 </summary>
 <param name="Table">The table schema of the target table which will be transfer.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:System.Data.SQLite.Linq.DataMapping.Interface.TableDump.IsPrimaryKey">
 <summary>
 1或者0
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
