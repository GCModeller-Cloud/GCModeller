<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.ComputingServices
</name>
</assembly>
<members>
<member name="T:Microsoft.VisualBasic.ComputingServices.Asymmetric.Instance">
 <summary>
 服务实例，只是和管理节点之间的通信的通道
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.ShutdownInstance">
 <summary>
 关闭目标物理机上面的一个指定编号的实例进程
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.GetLoad">
 <summary>
 主节点获取目标物理机的当前的系统负载，请注意系统负载的计算方法是可以被复写的，这个是为了适应不同的需求
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.NodeRegister">
 <summary>
 物理机上面的服务节点在启动之后向主节点进行自身网络位置的注册
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.GetInstanceList">
 <summary>
 主节点向目标物理主机请求所有在运行之中的服务进程实例
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.ParasitiferSvr">
 <summary>
 每一台物理主机上面只有一个宿主服务，所以其端口号固定
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.MasterSvr">
 <summary>
 中心节点服务
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer">
 <summary>
 主节点下面的每一台物理机上面的宿主服务，提供给该物理机上面的服务实例
 </summary>
 
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer.SystemLoad">
 <summary>
 获取当前物理主机上面的系统负载
 </summary>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._instance">
 <summary>
 服务实例的文件名
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._instanceList">
 <summary>
 在当前的物理主机上面所运行的服务实例列表
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._OAuth">
 <summary>
 这个节点在主节点上面的授权认证信息
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._invokeAuthnic">
 <summary>
 当前的这个管理节点和其所管理的服务实例之间相互通信所需要的身份认证信息
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer.#ctor(System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="Instance">全路径</param>
 <param name="Master">主节点的IP公网地址</param>
 <param name="PublicToken"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer.__getIPAddress">
 <summary>
 获取这台主机的公网IP地址
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.Asymmetric.DDM.Instance.Portal">
 <summary>
 直接对这个节点进行交互的端口
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master">
 <summary>
 非对等网络里面的中心主节点
 </summary>
 
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master._nodes">
 <summary>
 键名是IP地址，由于一台物理主机上面只会有一个管理节点，所以端口号都是固定了的
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.Nodes">
 <summary>
 获取在当前的服务器上面注册了的所有的管理节点的位置
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.#ctor(System.String)">
 <summary>
 
 </summary>
 <param name="PublicToken">计算自于宿主节点的证书哈希值</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.Folk(System.String)">
 <summary>
 创建出一个新的计算节点里面的服务实例
 </summary>
 <param name="CLI"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.GetInstances">
 <summary>
 获取当前网络之中的所有的已经运行的计算服务实例
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.__getPreferNode">
 <summary>
 获取得到最优先的物理机来开启新的计算节点，优先级别是和分布式计算网络之中的物理主机节点的CPU，内存负载量成反比的(本机的节点优先级别最低)
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.NodeRegister(System.Int64,Microsoft.VisualBasic.Net.Protocols.RequestStream,System.Net.IPEndPoint)">
 <summary>
 
 </summary>
 <param name="CA"></param>
 <param name="request"></param>
 <param name="remote">可能得到的是内网IP，所以不太准确，不是用这个参数来标记节点的位置</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.__getLoad(System.String,Microsoft.VisualBasic.Net.SSL.Certificate)">
 <summary>
 
 </summary>
 <param name="Node">IP地址</param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.Extensions">
 <summary>
 不对外公开的拓展方法
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.BaseStream">
 <summary>
 <see cref="T:System.IO.FileStream"/><see cref="T:System.IO.StreamWriter"/>
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.BaseStream.FileSystem">
 <summary>
 远端机器上面的文件系统的访问入口点
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream">
 <summary>
 Provides a System.IO.Stream for a file, supporting both synchronous and asynchronous
 read and write operations.To browse the .NET Framework source code for this type,
 see the Reference Source.
 </summary>
 
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.hashInfo">
 <summary>
 port@remote_IP://hash+&lt;path>
 </summary>
 <returns>Using for json serialization</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.#ctor(System.String,System.IO.FileMode,Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem)">
 <summary>
 Initializes a new instance of the System.IO.FileStream class with the specified
 path and creation mode.
 </summary>
 <param name="path">A relative or absolute path for the file that the current FileStream object will
 encapsulate.（远程机器上面的文件）</param>
 <param name="mode">A constant that determines how to open or create the file.</param>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.FileHandle">
 <summary>
 File handle on the remote machine file system
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.#ctor(Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle,Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem)">
 <summary>
 Initializes a new instance of the System.IO.FileStream class for the specified
 file handle, with the specified read/write permission.
 </summary>
 <param name="handle">A file handle for the file that the current FileStream object will encapsulate.</param>
 <param name="remote"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem)">
 <summary>
 Initializes a new instance of the System.IO.FileStream class with the specified
 path, creation mode, and read/write permission.
 </summary>
 <param name="path">A relative or absolute path for the file that the current FileStream object will
 encapsulate.</param>
 <param name="mode">A constant that determines how to open or create the file.</param>
 <param name="access">A constant that determines how the file can be accessed by the FileStream object.
 This also determines the values returned by the System.IO.FileStream.CanRead
 and System.IO.FileStream.CanWrite properties of the FileStream object. System.IO.FileStream.CanSeek
 is true if path specifies a disk file.</param>
 <param name="remote"></param>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.CanRead">
 <summary>
 Gets a value indicating whether the current stream supports reading.
 </summary>
 <returns>true if the stream supports reading; false if the stream is closed or was opened
 with write-only access.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.CanSeek">
 <summary>
 Gets a value indicating whether the current stream supports seeking.
 </summary>
 <returns>true if the stream supports seeking; false if the stream is closed or if the
 FileStream was constructed from an operating-system handle such as a pipe or
 output to the console.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.CanWrite">
 <summary>
 Gets a value indicating whether the current stream supports writing.
 </summary>
 <returns>true if the stream supports writing; false if the stream is closed or was opened
 with read-only access.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Handle">
 <summary>
 Gets the operating system file handle for the file that the current FileStream
 object encapsulates.
 </summary>
 <returns>The operating system file handle for the file encapsulated by this FileStream
 object, or -1 if the FileStream has been closed.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.IsAsync">
 <summary>
 Gets a value indicating whether the FileStream was opened asynchronously or synchronously.
 </summary>
 <returns>true if the FileStream was opened asynchronously; otherwise, false.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Length">
 <summary>
 Gets the length in bytes of the stream.
 </summary>
 <returns>A long value representing the length of the stream in bytes.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Name">
 <summary>
 Gets the name of the FileStream that was passed to the constructor.
 </summary>
 <returns>A string that is the name of the FileStream.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Position">
 <summary>
 Gets or sets the current position of this stream.
 </summary>
 <returns>The current position of this stream.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.EndWrite(System.IAsyncResult)">
 <summary>
 Ends an asynchronous write operation and blocks until the I/O operation is complete.
 (Consider using System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
 instead; see the Remarks section.)
 </summary>
 <param name="asyncResult">The pending asynchronous I/O request.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Flush">
 <summary>
 Clears buffers for this stream and causes any buffered data to be written to
 the file.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Flush(System.Boolean)">
 <summary>
 Clears buffers for this stream and causes any buffered data to be written to
 the file, and also clears all intermediate file buffers.
 </summary>
 <param name="flushToDisk">true to flush all intermediate file buffers; otherwise, false.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.SetLength(System.Int64)">
 <summary>
 Sets the length of this stream to the given value.
 </summary>
 <param name="value">The new length of the stream.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Write(System.Byte[],System.Int32,System.Int32)">
 <summary>
 Writes a block of bytes to the file stream.
 </summary>
 <param name="array">The buffer containing data to write to the stream.</param>
 <param name="offset">The zero-based byte offset in array from which to begin copying bytes to the
 stream.</param>
 <param name="count">The maximum number of bytes to write.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.WriteByte(System.Byte)">
 <summary>
 Writes a byte to the current position in the file stream.
 </summary>
 <param name="value">A byte to write to the stream.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Dispose(System.Boolean)">
 <summary>
 Releases the unmanaged resources used by the System.IO.FileStream and optionally
 releases the managed resources.
 </summary>
 <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged
 resources.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Finalize">
 <summary>
 Ensures that resources are freed and other cleanup operations are performed when
 the garbage collector reclaims the FileStream.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
 <summary>
 Begins an asynchronous read operation. (Consider using System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
 instead; see the Remarks section.)
 </summary>
 <param name="array">The buffer to read data into.</param>
 <param name="offset">The byte offset in array at which to begin reading.</param>
 <param name="numBytes">The maximum number of bytes to read.</param>
 <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
 <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request
 from other requests.</param>
 <returns>An object that references the asynchronous read.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
 <summary>
 Begins an asynchronous write operation. (Consider using System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
 instead; see the Remarks section.)
 </summary>
 <param name="array">The buffer containing data to write to the current stream.</param>
 <param name="offset">The zero-based byte offset in array at which to begin copying bytes to the current
 stream.</param>
 <param name="numBytes">The maximum number of bytes to write.</param>
 <param name="userCallback">The method to be called when the asynchronous write operation is completed.</param>
 <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write
 request from other requests.</param>
 <returns>An object that references the asynchronous write.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.EndRead(System.IAsyncResult)">
 <summary>
 Waits for the pending asynchronous read operation to complete. (Consider using
 System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
 instead; see the Remarks section.)
 </summary>
 <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
 <returns>The number of bytes read from the stream, between 0 and the number of bytes you
 requested. Streams only return 0 at the end of the stream, otherwise, they should
 block until at least 1 byte is available.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.FlushAsync(System.Threading.CancellationToken)">
 <summary>
 Asynchronously clears all buffers for this stream, causes any buffered data to
 be written to the underlying device, and monitors cancellation requests.
 </summary>
 <param name="cancellationToken">The token to monitor for cancellation requests.</param>
 <returns>A task that represents the asynchronous flush operation.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Read(System.Byte[],System.Int32,System.Int32)">
 <summary>
 Reads a block of bytes from the stream and writes the data in a given buffer.
 </summary>
 <param name="array">
 When this method returns, contains the specified byte array with the values between
 offset and (offset + count - 1) replaced by the bytes read from the current source.
 </param>
 <param name="offset">The byte offset in array at which the read bytes will be placed.</param>
 <param name="count">The maximum number of bytes to read.</param>
 <returns>The total number of bytes read into the buffer. This might be less than the number
 of bytes requested if that number of bytes are not currently available, or zero
 if the end of the stream is reached.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
 <summary>
 Asynchronously reads a sequence of bytes from the current stream, advances the
 position within the stream by the number of bytes read, and monitors cancellation
 requests.
 </summary>
 <param name="buffer">The buffer to write the data into.</param>
 <param name="offset">The byte offset in buffer at which to begin writing data from the stream.</param>
 <param name="count">The maximum number of bytes to read.</param>
 <param name="cancellationToken">The token to monitor for cancellation requests.</param>
 <returns>A task that represents the asynchronous read operation. The value of the TResult
 parameter contains the total number of bytes read into the buffer. The result
 value can be less than the number of bytes requested if the number of bytes currently
 available is less than the requested number, or it can be 0 (zero) if the end
 of the stream has been reached.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.ReadByte">
 <summary>
 Reads a byte from the file and advances the read position one byte.
 </summary>
 <returns>The byte, cast to an System.Int32, or -1 if the end of the stream has been reached.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
 <summary>
 Sets the current position of this stream to the given value.
 </summary>
 <param name="offset">The point relative to origin from which to begin seeking.</param>
 <param name="origin">Specifies the beginning, the end, or the current position as a reference point
 for offset, using a value of type System.IO.SeekOrigin.</param>
 <returns>The new position in the stream.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.IO.RemoteFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
 <summary>
 Asynchronously writes a sequence of bytes to the current stream, advances the
 current position within this stream by the number of bytes written, and monitors
 cancellation requests.
 </summary>
 <param name="buffer">The buffer to write data from.</param>
 <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the
 stream.</param>
 <param name="count">The maximum number of bytes to write.</param>
 <param name="cancellationToken">The token to monitor for cancellation requests.</param>
 <returns>A task that represents the asynchronous write operation.</returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.DirectoryInfo">
 <summary>
 表示本地或者远程文件系统对象上面的一个目录对象
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo">
 <summary>
 Provides access to information on a drive.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.AvailableFreeSpace">
 <summary>
 Indicates the amount of available free space on a drive, in bytes.
 </summary>
 <returns>The amount of free space available on the drive, in bytes.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.DriveFormat">
 <summary>
 Gets the name of the file system, such as NTFS or FAT32.
 </summary>
 <returns>The name of the file system on the specified drive.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.DriveType">
 <summary>
 Gets the drive type, such as CD-ROM, removable, network, or fixed.
 </summary>
 <returns>One of the enumeration values that specifies a drive type.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.IsReady">
 <summary>
 Gets a value that indicates whether a drive is ready.
 </summary>
 <returns>true if the drive is ready; false if the drive is not ready.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.Name">
 <summary>
 Gets the name of a drive, such as C:\.
 </summary>
 <returns>The name of the drive.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.RootDirectory">
 <summary>
 Gets the root directory of a drive.
 </summary>
 <returns>An object that contains the root directory of the drive.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.TotalFreeSpace">
 <summary>
 Gets the total amount of free space available on a drive, in bytes.
 </summary>
 <returns>The total free space available on a drive, in bytes.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.TotalSize">
 <summary>
 Gets the total size of storage space on a drive, in bytes.
 </summary>
 <returns>The total size of the drive, in bytes.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.DriveInfo.VolumeLabel">
 <summary>
 Gets or sets the volume label of a drive.
 </summary>
 <returns>The volume label.</returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle">
 <summary>
 The file handle object on the remote server machine.
 (在远端服务器上面的文件句柄对象)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle.FileName">
 <summary>
 The file location on the remote file system.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle.HashCode">
 <summary>
 The hash code value on the remote services program.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle.Handle">
 <summary>
 远程机器上面唯一标示的文件句柄值
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileURI">
 <summary>
 Represents a local file or remote file its location on the network.
 (表示一个本地文件或者网络上面的文件的位置)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileURI.EntryPoint">
 <summary>
 The services portal of this remote filesystem object.
 (远程文件服务对象的服务接口)
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileURI.File">
 <summary>
 The reference location of this file system object on the target machine.
 (目标机器(<see cref="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileURI.EntryPoint"/>)上面的文件系统的引用的位置)
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileURI.IsLocal">
 <summary>
 Is this file system object is a local file?.(是否为本地文件)
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileURI.ToString">
 <summary>
 {port}@{ipaddress}://C:\xxx\xxx.file
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileURI.FileStreamParser(System.String,Microsoft.VisualBasic.Net.IPEndPoint@,Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle@)">
 <summary>
 port@remote_IP://hash+&lt;path>
 </summary>
 <param name="uri"></param>
 <param name="remote"></param>
 <param name="handle"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.NetTransfer.Upload(System.String,System.String,Microsoft.VisualBasic.Net.IPEndPoint)">
 <summary>
 从本地上传文件
 </summary>
 <param name="local"></param>
 <param name="destination"></param>
 <param name="remote"></param>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileSystemAPI.OpenHandle">
 <summary>
 在服务器上面打开一个文件句柄
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileSystemAPI.FilePosition">
 <summary>
 获取或者得到文件流里面的指针的位置
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileSystemAPI.ReadBuffer">
 <summary>
 Reads a block of bytes from the stream and writes the data in a given buffer.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileSystemAPI.CurrentDirectory">
 <summary>
 Gets or sets the current directory.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileSystemAPI.Drives">
 <summary>
 Returns a read-only collection of all available drive names.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileSystemAPI.CopyDirectory">
 <summary>
 Copies the contents of a directory to another directory.
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileOpen">
 <summary>
 Initializes a new instance of the System.IO.FileStream class with the specified
 path and creation mode.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileOpen.Mode">
 <summary>
 Specifies how the operating system should open a file.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileOpen.OpenHandle">
 <summary>
 Initializes a new instance of the System.IO.FileStream class with the specified
 path and creation mode.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.ReadBuffer.length">
 <summary>
 输入的参数的长度
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileStreamPosition.Position">
 <summary>
 -100表示获取
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.API">
 <summary>
 
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.API.GetSetReadPosition(System.Int64,Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle)">
 <summary>
 
 </summary>
 <param name="pos">-100表示set</param>
 <param name="handle"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.API.GetSetLength(System.Int64,Microsoft.VisualBasic.ComputingServices.FileSystem.Protocols.FileHandle)">
 <summary>
 
 </summary>
 <param name="handle"></param>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystemHost.OpenedHandles">
 <summary>
 远程服务器上面已经打开的文件句柄
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystemHost.#ctor(System.Int32)">
 <summary>
 
 </summary>
 <param name="port"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystemHost.CurrentDirectory(System.Int64,Microsoft.VisualBasic.Net.Protocols.RequestStream,System.Net.IPEndPoint)">
 <summary>
 Gets or sets the current directory.
 </summary>
 <param name="CA"></param>
 <param name="args"></param>
 <param name="remote"></param>
 <returns>The current directory for file I/O operations.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystemHost.Drives(System.Int64,Microsoft.VisualBasic.Net.Protocols.RequestStream,System.Net.IPEndPoint)">
 <summary>
 Returns a read-only collection of all available drive names.
 </summary>
 <param name="CA"></param>
 <param name="args"></param>
 <param name="remote"></param>
 <returns>A read-only collection of all available drives as System.IO.DriveInfo objects.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystemHost.CopyDirectory(System.Int64,Microsoft.VisualBasic.Net.Protocols.RequestStream,System.Net.IPEndPoint)">
 <summary>
 Copies the contents of a directory to another directory.
 </summary>
 <param name="CA"></param>
 <param name="args"></param>
 <param name="remote"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem">
 <summary>
 Provides properties and methods for working with drives, files, and directories on remote server.
 (分布式文件系统)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.Portal">
 <summary>
 远端服务器的开放的句柄端口
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.CurrentDirectory">
 <summary>
 Gets or sets the current directory.
 </summary>
 <returns>The current directory for file I/O operations.</returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.Drives">
 <summary>
 Returns a read-only collection of all available drive names.
 </summary>
 <returns>A read-only collection of all available drives as System.IO.DriveInfo objects.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.CopyDirectory(System.String,System.String)">
 <summary>
 Copies the contents of a directory to another directory.
 </summary>
 <param name="sourceDirectoryName">The directory to be copied.</param>
 <param name="destinationDirectoryName">The location to which the directory contents should be copied.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)">
 <summary>
 Copies the contents of a directory to another directory.
 </summary>
 <param name="sourceDirectoryName">The directory to be copied.</param>
 <param name="destinationDirectoryName">The location to which the directory contents should be copied.</param>
 <param name="overwrite">True to overwrite existing files; otherwise False. Default is False.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.CopyFile(System.String,System.String)">
 <summary>
 Copies a file to a new location.
 </summary>
 <param name="sourceFileName">The file to be copied.</param>
 <param name="destinationFileName">The location to which the file should be copied.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.CopyFile(System.String,System.String,System.Boolean)">
 <summary>
 
 </summary>
 <param name="sourceFileName"></param>
 <param name="destinationFileName"></param>
 <param name="overwrite"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.CreateDirectory(System.String)">
 <summary>
 
 </summary>
 <param name="directory"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)">
 <summary>
 
 </summary>
 <param name="directory"></param>
 <param name="onDirectoryNotEmpty"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.DeleteFile(System.String)">
 <summary>
 
 </summary>
 <param name="file"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.MoveDirectory(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sourceDirectoryName"></param>
 <param name="destinationDirectoryName"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)">
 <summary>
 
 </summary>
 <param name="sourceDirectoryName"></param>
 <param name="destinationDirectoryName"></param>
 <param name="overwrite"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.MoveFile(System.String,System.String)">
 <summary>
 Moves a file to a new location.
 </summary>
 <param name="sourceFileName">Path of the file to be moved.</param>
 <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.MoveFile(System.String,System.String,System.Boolean)">
 <summary>
 Moves a file to a new location.
 </summary>
 <param name="sourceFileName">Path of the file to be moved.</param>
 <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
 <param name="overwrite">True to overwrite existing files; otherwise False. Default is False.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.RenameDirectory(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="directory"></param>
 <param name="newName"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.RenameFile(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="file"></param>
 <param name="newName"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)">
 <summary>
 Writes data to a binary file.
 </summary>
 <param name="file">Path and name of the file to be written to.</param>
 <param name="data">Data to be written to the file.</param>
 <param name="append">True to append to the file contents; False to overwrite the file contents. Default
 is False.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.WriteAllText(System.String,System.String,System.Boolean)">
 <summary>
 Writes text to a file.
 </summary>
 <param name="file">File to be written to.</param>
 <param name="text">Text to be written to file.</param>
 <param name="append">True to append to the contents of the file; False to overwrite the contents of
 the file.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)">
 <summary>
 Writes text to a file.
 </summary>
 <param name="file">File to be written to.</param>
 <param name="text">Text to be written to file.</param>
 <param name="append">True to append to the contents of the file; False to overwrite the contents of
 the file.</param>
 <param name="encoding">What encoding to use when writing to file.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.DirectoryExists(System.String)">
 <summary>
 
 </summary>
 <param name="directory"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.FileExists(System.String)">
 <summary>
 
 </summary>
 <param name="file"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)">
 <summary>
 Returns a read-only collection of strings representing the names of files containing
 the specified text.
 </summary>
 <param name="directory">The directory to be searched.</param>
 <param name="containsText">The search text.</param>
 <param name="ignoreCase">True if the search should be case-sensitive; otherwise False. Default is True.</param>
 <param name="searchType">Whether to include subfolders. Default is SearchOption.SearchTopLevelOnly.</param>
 <returns>Read-only collection of the names of files containing the specified text..</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
 <summary>
 
 </summary>
 <param name="directory"></param>
 <param name="containsText"></param>
 <param name="ignoreCase"></param>
 <param name="searchType"></param>
 <param name="fileWildcards"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetDirectories(System.String)">
 <summary>
 Returns a collection of strings representing the path names of subdirectories
 within a directory.
 </summary>
 <param name="directory">Name and path of directory.</param>
 <returns>Read-only collection of the path names of subdirectories within the specified
 directory.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
 <summary>
 
 </summary>
 <param name="directory"></param>
 <param name="searchType"></param>
 <param name="wildcards"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetDirectoryInfo(System.String)">
 <summary>
 
 </summary>
 <param name="directory"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetDriveInfo(System.String)">
 <summary>
 
 </summary>
 <param name="drive"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetFileInfo(System.String)">
 <summary>
 
 </summary>
 <param name="file"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetFiles(System.String)">
 <summary>
 Returns a read-only collection of strings representing the names of files within
 a directory.
 </summary>
 <param name="directory">Directory to be searched.</param>
 <returns>Read-only collection of file names from the specified directory.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
 <summary>
 
 </summary>
 <param name="directory"></param>
 <param name="searchType"></param>
 <param name="wildcards"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetParentPath(System.String)">
 <summary>
 
 </summary>
 <param name="path"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.GetTempFileName">
 <summary>
 
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenFileHandle(System.String,System.IO.FileMode,System.IO.FileAccess)">
 <summary>
 在远程服务器上面打开一个文件句柄
 </summary>
 <param name="file"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenFileHandle(System.String,System.IO.FileMode,System.IO.FileAccess,Microsoft.VisualBasic.Net.IPEndPoint)">
 <summary>
 在远程服务器上面打开一个文件句柄
 </summary>
 <param name="file"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenTextFieldParser(System.String,System.String[])">
 <summary>
 The OpenTextFieldParser method allows you to create a Microsoft.VisualBasic.FileIO.TextFieldParser
 object, which provides a way to easily and efficiently parse structured text
 files, such as logs. The TextFieldParser object can be used to read both delimited
 and fixed-width files.
 </summary>
 <param name="file">The file to be opened with the TextFieldParser.</param>
 <param name="delimiters">Delimiters for the fields.</param>
 <returns>Microsoft.VisualBasic.FileIO.TextFieldParser to read the specified file.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenTextFieldParser(System.String,System.Int32[])">
 <summary>
 The OpenTextFieldParser method allows you to create a Microsoft.VisualBasic.FileIO.TextFieldParser
 object, which provides a way to easily and efficiently parse structured text
 files, such as logs. The TextFieldParser object can be used to read both delimited
 and fixed-width files.
 </summary>
 <param name="file">The file to be opened with the TextFieldParser.</param>
 <param name="fieldWidths">Widths of the fields.</param>
 <returns>Microsoft.VisualBasic.FileIO.TextFieldParser to read the specified file.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenTextFileReader(System.String)">
 <summary>
 Opens a System.IO.StreamReader object to read from a file.
 </summary>
 <param name="file">File to be read.</param>
 <returns>System.IO.StreamReader object to read from the file</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)">
 <summary>
 Opens a System.IO.StreamReader object to read from a file.
 </summary>
 <param name="file">File to be read.</param>
 <param name="encoding">The encoding to use for the file contents. Default is ASCII.</param>
 <returns>System.IO.StreamReader object to read from the file</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenTextFileWriter(System.String,System.Boolean)">
 <summary>
 Opens a System.IO.StreamWriter object to write to the specified file.
 </summary>
 <param name="file">File to be written to.</param>
 <param name="append">True to append to the contents of the file; False to overwrite the contents of
 the file. Default is False.</param>
 <returns>System.IO.StreamWriter object to write to the specified file.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)">
 <summary>
 Opens a System.IO.StreamWriter to write to the specified file.
 </summary>
 <param name="file">File to be written to.</param>
 <param name="append">True to append to the contents in the file; False to overwrite the contents of
 the file. Default is False.</param>
 <param name="encoding">Encoding to be used in writing to the file. Default is ASCII.</param>
 <returns>System.IO.StreamWriter object to write to the specified file.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.ReadAllBytes(System.String)">
 <summary>
 Returns the contents of a file as a byte array.
 </summary>
 <param name="file">File to be read.</param>
 <returns>Byte array containing the contents of the file.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.ReadAllText(System.String)">
 <summary>
 Returns the contents of a text file as a String.
 </summary>
 <param name="file">Name and path of the file to read.</param>
 <returns>String containing the contents of the file.</returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.FileSystem.FileSystem.ReadAllText(System.String,System.Text.Encoding)">
 <summary>
 Returns the contents of a text file as a String.
 </summary>
 <param name="file">Name and path of the file to read.</param>
 <param name="encoding">Character encoding to use in reading the file. Default is UTF-8.</param>
 <returns>String containing the contents of the file.</returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.SharedMemory.SharedSvr">
 <summary>
 Memory shared services.
 </summary>
 
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.SharedMemory.SharedSvr.__variables">
 <summary>
 这个是提供给远程主机读取使用的
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.SharedMemory.SharedSvr.Allocate(System.String,System.Object,System.Boolean)">
 <summary>
 
 </summary>
 <param name="name"></param>
 <param name="value"></param>
 <param name="[overrides]">If the value type is not equals, overrides the exists value?</param>
 <returns>Write or update the memory success?</returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.SharedMemory.HashValue">
 <summary>
 The shared variable on the remote machine.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.SharedMemory.HashValue.Identifier">
 <summary>
 The variable name
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.SharedMemory.HashValue.value">
 <summary>
 variable value
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.SharedMemory.HashValue.Type">
 <summary>
 Simple type information
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.SharedMemory.HashValue.GetValueJson">
 <summary>
 Json serialization for the network transfer.
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.SharedMemory.Argv">
 <summary>
 Variable value for the network transfer
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.SharedMemory.Argv.Identifier">
 <summary>
 The variable name
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.SharedMemory.Argv.value">
 <summary>
 Json value, and the type information is also included in this property.
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.SharedMemory.MemoryServices">
 <summary>
 Shared the memory with the remote machine.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.SharedMemory.MemoryServices.GetValue``1(System.String)">
 <summary>
 Gets the memory data from remote machine.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="name">建议使用NameOf来设置或者获取参数值</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.SharedMemory.MemoryServices.SetValue``1(System.String,``0)">
 <summary>
 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="name">建议使用NameOf来设置或者获取参数值</param>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.SharedMemory.MemoryServices.#ctor(Microsoft.VisualBasic.Net.IPEndPoint,System.Int32)">
 <summary>
 
 </summary>
 <param name="remote"></param>
 <param name="local">local services port that provides to the remote</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskInvoke.#ctor(System.Int32)">
 <summary>
 
 </summary>
 <param name="port">You can suing function <see cref="M:Microsoft.VisualBasic.Net.TCPExtensions.GetFirstAvailablePort(System.Int32)"/> to initialize this server object.</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskInvoke.Invoke(Microsoft.VisualBasic.ComputingServices.TaskHost.InvokeInfo)">
 <summary>
 Invoke the function on the remote server.(远程服务器上面通过这个方法执行函数调用)
 </summary>
 <param name="params"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskInvoke.__invoke(Microsoft.VisualBasic.ComputingServices.TaskHost.InvokeInfo,System.Type@)">
 <summary>
 A common function of invoke the method on the remote machine
 </summary>
 <param name="params">远程主机上面的函数指针</param>
 <param name="value">value's <see cref="T:System.Type"/></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskInvoke.InvokeLinq(System.Int64,Microsoft.VisualBasic.Net.Protocols.RequestStream,System.Net.IPEndPoint)">
 <summary>
 执行远程Linq代码
 </summary>
 <param name="CA">SSL证书编号</param>
 <param name="args"></param>
 <param name="remote"></param>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqPool.__linq">
 <summary>
 linq池
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqPool.Free(System.String)">
 <summary>
 uid参数是Linq Portal的Tostring函数的结果
 </summary>
 <param name="uid"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqPool.OpenQuery(System.Collections.IEnumerable,System.Type)">
 <summary>

 </summary>
 <param name="source"></param>
 <param name="type">
 这里应该是集合的类型，函数会自动从这个类型信息之中得到元素的类型；
 假若函数获取得到集合之中的元素的类型失败的话，则会直接使用所传入的类型参数作为集合之中的元素类型
 </param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinqReader">
 <summary>
 Remote Linq source reader
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinqReader.Type">
 <summary>
 Element type in the source collection.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinqReader.Portal">
 <summary>
 Remote entry point
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinqReader.#ctor(Microsoft.VisualBasic.Net.IPEndPoint,System.Type)">
 <summary>
 
 </summary>
 <param name="portal"></param>
 <param name="type">JSON反序列化所需要的类型信息</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinqReader.Moves(System.Int32)">
 <summary>
 这个迭代器函数不会重置远程的数据源
 </summary>
 <param name="n">迭代器所返回来的元素数量，当小于1的时候会被自动重置为1个元素</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinqReader.AsQuerable">
 <summary>
 使用这个迭代器函数查询会自动重置远程的数据源的位置到初始位置
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinqReader.__free">
 <summary>
 Automatically free the remote resource.(释放远程主机上面的资源)
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinq`1">
 <summary>
 Remote LINQ source reader
 </summary>
 <typeparam name="T"></typeparam>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinq`1.#ctor(Microsoft.VisualBasic.Net.IPEndPoint)">
 <summary>
 Creates a linq source reader from the remote entry point
 </summary>
 <param name="portal"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ILinq`1.AsQuerable">
 <summary>
 这个迭代器函数会自动重置远程数据源
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqProvider">
 <summary>
 执行得到数据集合然后分独传输数据元素
 </summary>
 
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqProvider.#ctor(System.Collections.IEnumerable,System.Type)">
 <summary>
 
 </summary>
 <param name="source"></param>
 <param name="type">Element's <see cref="T:System.Type">type</see> in the <paramref name="source"/></param>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqProvider.__svrThread">
 <summary>
 使用线程可能会在出现错误的时候导致应用程序崩溃，所以在这里使用begineInvoke好了
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqProvider.IsOpen">
 <summary>
 当前的这个数据源服务是否已经正确的开启了？
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqProvider.BaseType">
 <summary>
 Linq数据源的集合的类型信息
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.LinqProvider.Moves(System.Int32,System.Boolean@)">
 <summary>
 
 </summary>
 <param name="n">
 个数小于或者等于1，就只会返回一个对象；
 个数大于1的，会读取相应数量的元素然后返回一个集合类型
 </param>
 <param name="readDone"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.Rtvl">
 <summary>
 The returns value.(远端调用的函数返回)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.Rtvl.ex">
 <summary>
 Exception Message
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.Rtvl.value">
 <summary>
 Json value
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.Rtvl.GetValue(System.Type)">
 <summary>
 If the remote execute raising a exception, then a exception will be throw from this function.
 </summary>
 <param name="type"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.Argv">
 <summary>
 Json value of the function parameter, and the type information is also included in this property.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.Argv.Type">
 <summary>
 <see cref="P:System.Type.FullName"/>
 </summary>
 <returns><see cref="P:System.Type.FullName"/></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.Argv.value">
 <summary>
 Json string
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.Argv.#ctor(System.Object)">
 <summary>
 Creates the function remote calls one of its parameter value. 
 </summary>
 <param name="o"></param>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.InvokeInfo">
 <summary>
 分布式计算框架之中的远程调用的参数信息
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.InvokeInfo.Name">
 <summary>
 函数名
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.InvokeInfo.Parameters">
 <summary>
 json value.(函数参数)
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.InvokeInfo.GetParameters(System.Reflection.MethodInfo,System.String[])">
 <summary>
 
 </summary>
 <param name="method"></param>
 <param name="args">json</param>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Extensions._local">
 <summary>
 Services running on a LAN?
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.Extensions.EnvironmentLocal">
 <summary>
 假若这个参数为真，则说明服务只是运行在局域网之中，则只会返回局域网的IP地址
 假若为假，则说明服务是运行在互联网上面的，则会查询主机的公共IP地址，调试的时候建议设置为真
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.Extensions.AddressOf(System.Type,System.String)">
 <summary>
 
 </summary>
 <param name="type"></param>
 <param name="name">NameOf</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.Extensions.Invoke``1(Microsoft.VisualBasic.ComputingServices.TaskHost.InvokeInfo,Microsoft.VisualBasic.ComputingServices.TaskHost.TaskHost)">
 <summary>
 DirectCast
 </summary>
 <typeparam name="T"></typeparam>
 <param name="info"></param>
 <param name="host"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.MemoryHash.GetType(System.Int64)">
 <summary>
 Gets the object reference type.
 </summary>
 <param name="addr"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.MemoryHash.Destroy(System.Int64)">
 <summary>
 按照内存指针销毁对象
 </summary>
 <param name="p"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ShadowsCopy.ShadowsCopy(System.Object,System.Object,Microsoft.VisualBasic.ComputingServices.TaskHost.MemoryHash)">
 <summary>
 将客户端上面的对象数据复制到远程主机上面的内存管理模块之中
 </summary>
 <param name="from">Client上面的</param>
 <param name="target">服务器上面的</param>
 <param name="memory">内存管理模块单元</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ShadowsCopy.__innerCopy(System.Object,System.Object,Microsoft.VisualBasic.ComputingServices.TaskHost.MemoryHash,Microsoft.VisualBasic.List{System.Int64})">
 <summary>
 
 </summary>
 <param name="from"></param>
 <param name="target">远程服务器上面的对象</param>
 <param name="memory">远程对象的内存管理模块</param>
 <param name="stack">Avoided of the loop reference.(内存管理的复制堆栈记录)</param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.ObjectAddress">
 <summary>
 Object reference address on the remote
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.TaskHost.ObjectAddress.HashCode">
 <summary>
 <see cref="T:System.Object"/> from local
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.ObjectAddress.ReferenceEquals(Microsoft.VisualBasic.ComputingServices.TaskHost.ObjectAddress)">
 <summary>
 Object is equals on the remote and local
 </summary>
 <param name="addr"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols">
 <summary>
 分布式计算之中的远端调用的堆栈协议
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols">
 <summary>
 Task remotes protocols
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols.Free">
 <summary>
 Free a object pointer on the remote machine.(释放掉某一个资源)
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols.Invoke">
 <summary>
 Invoke a function remotely
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols.InvokeLinq">
 <summary>
 Invoke a function as a linq data source.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols.RemoteFileSystem">
 <summary>
 Gets the portal of the remote FileSystem
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols.MoveNext">
 <summary>
 Linq data source move next
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols.Reset">
 <summary>
 Resets the iterator of the remote linq source
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.TaskProtocols.ReadsDone">
 <summary>
 The remote linq source reads done! Exit the iterator function.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.Protocols.LinqReset">
 <summary>
 Resets remote data source by <see cref="M:System.Collections.IEnumerator.Reset"/>
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskHost">
 <summary>
 Using this object to running the method on the remote machine.
 由于是远程调用，所以运行的环境可能会很不一样，所以在设计程序的时候请尽量避免或者不要使用模块变量，以免出现难以调查的BUG
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskHost.Shell(System.String,System.String)">
 <summary>
 Start the application on the remote host.(相当于Sub，调用远程的命令行程序，只会返回0或者错误代码)
 </summary>
 <param name="exe">Exe file path</param>
 <param name="args"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskHost.Invoke(System.Delegate,System.Object[])">
 <summary>
 Running the function delegate pointer on the remote machine. 
 
 *****************************************************************************************************
 NOTE: Performance issue, this is important! if the function pointer its returns type is a collection, 
 then you should using the method <see cref="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskHost.AsLinq``1(System.Delegate,System.Object[])"/> to running 
 your code on the remote. Or a large json data will be return back through network in one package, 
 this may cause a serious performance problem both on your server and your local client.
 (本地服务器通过这个方法调用远程主机上面的函数，假若目标函数的返回值类型是一个集合，
 请使用<see cref="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskHost.AsLinq``1(System.Delegate,System.Object[])"/>方法，否则集合之中的所有数据都将会一次性返回，这个可能会导致严重的性能问题)
 </summary>
 <param name="target"></param>
 <param name="args"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.TaskHost.TaskHost.AsLinq``1(System.Delegate,System.Object[])">
 <summary>
 If your function pointer returns type is a collection, then using this method is recommended.
 (执行远程机器上面的代码，然后返回数据查询接口)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="target">远程机器上面的函数指针</param>
 <param name="args"></param>
 <returns></returns>
</member>
</members>
</doc>
