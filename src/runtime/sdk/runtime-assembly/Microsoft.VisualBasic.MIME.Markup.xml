<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.MIME.Markup
</name>
</assembly>
<members>
<member name="T:Microsoft.VisualBasic.MIME.Markup.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont">
 <summary>
 ```CSS
 font-style: style; font-size: size; font-family: Name;
 ```
 
 这个简写属性用于一次设置元素字体的两个或更多方面。使用 ``icon`` 等关键字可以适当地设置元素的字体，使之与用户计算机环境中的某个方面一致。
 注意，如果没有使用这些关键词，至少要指定字体大小和字体系列。
 可以按顺序设置如下属性：

 + font-style
 + font-variant
 + font-weight
 + font-size/line-height
 + font-family

 可以不设置其中的某个值，比如 ``font:100% verdana;`` 也是允许的。未设置的属性会使用其默认值。
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.style">
 <summary>
 The System.Drawing.FontStyle of the new font.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.family">
 <summary>
 A string representation of the System.Drawing.FontFamily for the new System.Drawing.Font.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.GDIObject">
 <summary>
 Initializes a new <see cref="T:System.Drawing.Font"/> using a specified size and style.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.TryParse(System.String,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont)">
 <summary>
 Parsing font style data from the css expression string.
 </summary>
 <param name="css"></param>
 <param name="[default]">On failure return this default value</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocParserAPI.TextParse(System.String@)">
 <summary>
 解析标签开始和结束的位置之间的内部html文本
 </summary>
 <param name="doc"></param>
 <returns></returns>
 <remarks>这个方法是最开始的解析函数，非递归的</remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocParserAPI.__innerTextParser(System.String@,System.String,System.Boolean@)">
 <summary>
 在得到一个标签之后前面的数据会被扔掉，开始解析标签后面的数据
 </summary>
 <param name="innerText"></param>
 <param name="parent"></param>
 <returns>这个函数是一个递归函数</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.TextAPI.TryParse(System.String,System.Drawing.Font)">
 <summary>
 执行html栈空间解析
 </summary>
 <param name="html"></param>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Image.Text">
 <summary>
 这个Image对象的原始的html字符串
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Image.ResParser(System.String)">
 <summary>
 
 </summary>
 <param name="img">&lt;img> html标签</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlDocument.LoadDocument(System.String)">
 <summary>
 假设所加载的html文档是完好的格式的，即没有不匹配的标签的
 </summary>
 <param name="url"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlElement">
 <summary>
 一个标签所标记的元素以及内部文本
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlElement.Name">
 <summary>
 标签名
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlElement.Attributes">
 <summary>
 标签的属性列表
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.InnerPlantText">
 <summary>
 Plant text inner the html.(HTML文档内的纯文本对象)
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Extensions.StripHTMLSafely(System.String)">
 <summary>
 Strip out HTML tags while preserving the basic formatting
 </summary>
 <param name="source"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Extensions.StripHTMLDirectly(System.String)">
 <summary>
 Strip out HTML tags while preserving the basic formatting
 </summary>
 <param name="source"></param>
 <returns></returns>
 <remarks>http://www.codeproject.com/Articles/11902/Convert-HTML-to-Plain-Text</remarks>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter">
 <summary>
 Module provides some method for text document
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter.HighlightLinks(System.String)">
 <summary>
 High light all of the links in the text document automatically.
 </summary>
 <param name="s">Assuming that the input text is plant text.</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter.HighlightURL(System.String)">
 <summary>
 Highligh links in the text.(将文档里面的url使用html标记出来)
 </summary>
 <param name="s">假设这里面没有任何html标记</param>
 <returns></returns>
 
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter.HighlightEMail(System.String)">
 <summary>
 Highlights the email address in the text.(将文档里面的电子邮件地址使用html标记出来)
 </summary>
 <param name="s"></param>
 <returns></returns>
 
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.WikiArticles">
 <summary>
 Create short link for https://wikipedia.org
 ex: https://en.wikipedia.org/wiki/Southern_Ontario => en_wiki://Southern_Ontario
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.WikiArticles.Transform(System.String)">
 <summary>
 <see cref="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.ExtensionTransform"/>
 </summary>
 <param name="text"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.ExtensionTransform">
 <summary>
 Replace inline element
 </summary>
 <param name="text"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle">
 <summary>
 Add title to youtube link
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle._links">
 <summary>
 Array of links: videoID/title
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle._apiKey">
 <summary>
 Google api key
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.#ctor(System.String,System.Int32)">
 <summary>
 FiXME: max ids?
 </summary>
 <param name="apiKey"></param>
 <param name="maxLinks"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.GetExtension(System.String,System.Int32)">
 <summary>
 FiXME: max ids?
 </summary>
 <param name="apiKey"></param>
 <param name="maxLinks"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.RequestToGoogleApi(System.String)">
 <summary>
 Get videos titles from youtube API
 More info: https://developers.google.com/youtube/v3/
 </summary>
 <param name="ids"></param>
 <returns>Return null string if request failed</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.ParseApiResponse(System.String)">
 <summary>
 Parse API JSON response
 </summary>
 <param name="res"></param>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML">
 <summary>
 Markdown is a text-to-HTML conversion tool for web writers. 
 Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
 then convert it to structurally valid XHTML (or HTML).
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.#ctor(Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions)">
 <summary>
 Create a new Markdown instance and set the options from the MarkdownOptions object.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DisableHr">
 <summary>
 Disable hr parser
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DisableHeaders">
 <summary>
 Disable header parser
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DisableImages">
 <summary>
 Disable image parser
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.QuoteSingleLine">
 <summary>
 Don't grab next lines
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EmptyElementSuffix">
 <summary>
 use ">" for HTML output, or " />" for XHTML output
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.LinkEmails">
 <summary>
 when false, email addresses will never be auto-linked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.StrictBoldItalic">
 <summary>
 when true, bold and italic require non-word characters on either side  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AsteriskIntraWordEmphasis">
 <summary>
 when true, asterisks may be used for intraword emphasis
 this does nothing if StrictBoldItalic is false
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AutoNewLines">
 <summary>
 when true, RETURN becomes a literal newline  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AutoHyperlink">
 <summary>
 when true, (most) bare plain URLs are auto-hyperlinked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.Transform(System.String)">
 <summary>
 Transforms the provided Markdown-formatted text to HTML;  
 see http://en.wikipedia.org/wiki/Markdown
 (好像这个并不支持代码高亮的格式化)
 </summary>
 <remarks>
 The order in which other subs are called here is
 essential. Link and image substitutions need to happen before
 EscapeSpecialChars(), so that any *'s or _'s in the a
 and img tags get encoded.
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.RunBlockGamut(System.String,System.Boolean,System.Boolean)">
 <summary>
 Perform transformations that form block-level tags like paragraphs, headers, and list items.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AddExtension(Microsoft.VisualBasic.MIME.Markup.MarkDown.ExtensionTransform)">
 <summary>
 Public <see cref="T:System.Delegate"/> Function ExtensionTransform(text As <see cref="T:System.String"/>) As <see cref="T:System.String"/>
 </summary>
 <param name="ext"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.RunSpanGamut(System.String)">
 <summary>
 Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.FormParagraphs(System.String,System.Boolean,System.Boolean)">
 <summary>
 splits on two or more newlines, to form "paragraphs";    
 each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.GetNestedBracketsPattern">
 <summary>
 Reusable pattern to match balanced [brackets]. See Friedl's 
 "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.GetNestedParensPattern">
 <summary>
 Reusable pattern to match balanced (parens). See Friedl's 
 "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.StripLinkDefinitions(System.String)">
 <summary>
 Strips link definitions from text, stores the URLs and titles in hash references.
 </summary>
 <remarks>
 ^[id]: url "optional title"
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.GetBlockPattern">
 <summary>
 derived pretty much verbatim from PHP Markdown
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.HashHTMLBlocks(System.String)">
 <summary>
 replaces any block-level HTML blocks with hash entries
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoAnchors(System.String)">
 <summary>
 Turn Markdown link shortcuts into HTML anchor tags
 </summary>
 <remarks>
 [link text](url "title") 
 [link text][id] 
 [id] 
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoImages(System.String)">
 <summary>
 Turn Markdown image shortcuts into HTML img tags. 
 </summary>
 <remarks>
 ![alt text][id]
 ![alt text](url "optional title")
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoHeaders(System.String)">
 <summary>
 Turn Markdown headers into HTML header tags
 </summary>
 <remarks>
 Header 1  
 ========  
 
 Header 2  
 --------  
 
 # Header 1  
 ## Header 2  
 ## Header 2 with closing hashes ##  
 ...  
 ###### Header 6  
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoHorizontalRules(System.String)">
 <summary>
 Turn Markdown horizontal rules into HTML hr tags
 </summary>
 <remarks>
 ***  
 * * *  
 ---
 - - -
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoLists(System.String)">
 <summary>
 Turn Markdown lists into HTML ul and ol and li tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.ProcessListItems(System.String,System.String)">
 <summary>
 Process the contents of a single ordered or unordered list, splitting it
 into individual list items.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoCodeBlocks(System.String)">
 <summary>
 /// Turn Markdown 4-space indented code into HTML pre code blocks
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoCodeSpans(System.String)">
 <summary>
 Turn Markdown `code spans` into HTML code tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoItalicsAndBold(System.String)">
 <summary>
 Turn Markdown *italics* and **bold** into HTML strong and em tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoHardBreaks(System.String)">
 <summary>
 Turn markdown line breaks (two space at end of line) into HTML break tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoBlockQuotes(System.String)">
 <summary>
 Turn Markdown > quoted blocks into HTML blockquote blocks
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoAutoLinks(System.String)">
 <summary>
 Turn angle-delimited URLs into HTML anchor tags
 </summary>
 <remarks>
 &lt;http://www.example.com&gt;
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EncodeEmailAddress(System.String)">
 <summary>
 encodes email address randomly  
 roughly 10% raw, 45% hex, 45% dec 
 note that @ is always encoded and : never is
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EncodeCode(System.String)">
 <summary>
 Encode/escape certain Markdown characters inside code blocks and spans where they are literals
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EncodeAmpsAndAngles(System.String)">
 <summary>
 Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EscapeBackslashes(System.String)">
 <summary>
 Encodes any escaped characters such as \`, \*, \[ etc
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.Unescape(System.String)">
 <summary>
 swap back in all the special characters we've hidden
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EscapeBoldItalic(System.String)">
 <summary>
 escapes Bold [ * ] and Italic [ _ ] characters
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EscapeSpecialCharsWithinTagAttributes(System.String)">
 <summary>
 Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
 don't conflict with their use in Markdown for code, italics and strong. 
 We're replacing each such character with its corresponding hash 
 value; this is likely overkill, but it should prevent us from colliding 
 with the escape values by accident.
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions">
 <summary>
 The markdown document generate options.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AllowEmptyLinkText">
 <summary>
 when true, text link may be empty
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.DisableHr">
 <summary>
 when true, hr parser disabled
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.DisableHeaders">
 <summary>
 when true, header parser disabled
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.DisableImages">
 <summary>
 when true, image parser disabled
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.QuoteSingleLine">
 <summary>
 when true, quote dont grab next lines
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AutoHyperlink">
 <summary>
 when true, (most) bare plain URLs are auto-hyperlinked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AutoNewlines">
 <summary>
 when true, RETURN becomes a literal newline  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.EmptyElementSuffix">
 <summary>
 use ">" for HTML output, or " />" for XHTML output
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.LinkEmails">
 <summary>
 when false, email addresses will never be auto-linked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.StrictBoldItalic">
 <summary>
 when true, bold and italic require non-word characters on either side  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AsteriskIntraWordEmphasis">
 <summary>
 when true, asterisks may be used for intraword emphasis
 this does nothing if StrictBoldItalic is false
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper.#cctor">
 <summary>
 In the static constuctor we'll initialize what stays the same across all transforms.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper._tabWidth">
 <summary>
 Tabs are automatically converted to spaces as part of the transform  
 this constant determines how "wide" those tabs become in spaces  
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper.Outdent(System.String)">
 <summary>
 Remove one level of line-leading spaces
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper.handleTrailingParens(System.Text.RegularExpressions.Match)">
 <summary>
 The first group is essentially a negative lookbehind -- if there's a &lt; or a =", we don't touch this.
 We're not using a *real* lookbehind, because of links with in links, like 
 &lt;a href="http://web.archive.org/web/20121130000728/http://www.google.com/">
 With a real lookbehind, the full link would never be matched, and thus the http://www.google.com *would* be matched.
 With the simulated lookbehind, the full link *is* matched (just not handled, because of this early return), causing
 the google link to not be matched again.
 </summary>
 <param name="match"></param>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.DocumentHelper._nestDepth">
 <summary>
 maximum nested depth of [] and () supported by the transform; implementation detail
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.DocumentHelper.TokenizeHTML(System.String)">
 <summary>
 returns an array of HTML tokens comprising the input string. Each token is 
 either a tag (possibly with nested, tags contained therein, such 
 as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
 array is a two-element array; the first is either 'tag' or 'text'; the second is 
 the actual value.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.DocumentHelper.Normalize(System.String)">
 <summary>
 convert all tabs to _tabWidth spaces; 
 standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
 makes sure text ends with a couple of newlines; 
 removes any blank lines (only spaces) in the text
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.Block">
 <summary>
 Block-Level Grammar
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser">
 <summary>
 在markdown里面有两张类型的标记语法：
 
 + 一种是和普通的文本混合在一起的
 + 一种是自己占有一整行文本或者一整个文本块的
 
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser.MarkdownParser(System.String)">
 <summary>
 
 </summary>
 <param name="path">The file path to the markdown text document.</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser.SyntaxParser(System.String)">
 <summary>
 
 </summary>
 <param name="md">The markdown file text content, not file path</param>
 <returns></returns>
 <remarks>在这个函数之中只是解析区块的文本数据，段落型的格式则是在另外的一个模块之中解析的</remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser.IsHeader(System.String,System.String[],System.Int32@)">
 <summary>
 
 </summary>
 <param name="lines"></param>
 <param name="i"></param>
 <returns></returns>
 <remarks></remarks>
 <![CDATA[
 <h3 id = "header" > Headers</h3>

 Markdown supports two styles Of headers, [Setext] [1] And [atx] [2].

 Setext-style headers are "underlined" using equal signs (for first-level
 headers) And dashes (for second-level headers). For example:

     This Is an H1
     =============

     This Is an H2
     -------------

 Any number Of underlining `=`'s or `-`'s will work.

 Atx-style headers use 1-6 hash characters at the start of the line,
 corresponding to header levels 1-6. For example:

     # This Is an H1

     ## This Is an H2

     ###### This Is an H6

 Optionally, you may "close" atx-style headers. This Is purely
 cosmetic -- you can use this if you think it looks better. The
 closing hashes don't even need to match the number of hashes
 used to open the header. (The number of opening hashes
 determines the header level.) 

     # This Is an H1 #
 
     ## This Is an H2 ##

     ### This Is an H3 ######
 ]]>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.Span.LinksParser">
 <summary>
 
 </summary>
 <![CDATA[
 <h2 id="span">Span Elements</h2>
 <h3 id = "link" > Links</h3>

 Markdown supports two style Of links: *inline* And *reference*.

 In both styles, the link text Is delimited by [square brackets].

 To create an inline link, use a set of regular parentheses immediately
 after the link text's closing square bracket. Inside the parentheses,
 put the URL where you want the link To point, along With an *Optional*
 title for the link, surrounded in quotes. For example:

     This Is [an example](http//example.com/ "Title") inline link.

     [This link](http//example.net/) has no title attribute.

 Will produce

     <p> This Is <a href="http://example.com/" title="Title">
     an example</a> inline link.</p>

     <p> <a href = "http://example.net/" > This link</a> has no
     title attribute.</p>

 If you're referring to a local resource on the same server, you can
 use relative paths:

     See my [About](/about/) page For details.   

 Reference-style links use a second set of square brackets, inside
 which you place a label Of your choosing To identify the link:

     This Is [an example][id] reference-style link.

 You can optionally use a space To separate the sets Of brackets:

     This Is [an example] [id] reference-style link.

 Then, anywhere in the document, you define your link label Like this,
 On a line by itself

     [id]: http://example.com/  "Optional Title Here"

 That Is

 *   Square brackets containing the link identifier (optionally
     indented from the left margin Using up To three spaces);
 *   followed by a colon;
 *   followed by one Or more spaces (Or tabs);
 *   followed by the URL for the link;
 *   optionally followed by a title attribute for the link, enclosed
     in double Or single quotes, Or enclosed in parentheses.

 The following three link definitions are equivalent

	 [foo]: http://example.com/  "Optional Title Here"
	 [foo]: http://example.com/  'Optional Title Here'
	 [foo]: http://example.com/  (Optional Title Here)

 **Note** There Is a known bug in Markdown.pl 1.0.1 which prevents
 Single quotes from being used to delimit link titles.

 The link URL may, optionally, be surrounded by angle brackets

     [id]: <http: //example.com/>  "Optional Title Here"

 You can put the title attribute On the Next line And use extra spaces
 Or tabs for padding, which tends to look better with longer URLs

     [id]: http://example.com/longish/path/to/resource/here
         "Optional Title Here"

 Link definitions are only used For creating links during Markdown
 processing, And are stripped from your document in the HTML output.

 Link definition names may consist Of letters, numbers, spaces, And
 punctuation -- but they are *Not* case sensitive. E.g. these two
 links:

	 [link text][a]
	 [link text][A]

 are equivalent.

 The *implicit link name* shortcut allows you to omit the name of the
 link, in which case the link text itself Is used as the name.
 Just use an empty Set Of square brackets -- e.g., To link the word
 "Google" to the google.com web site, you could simply write:

	 [Google][]

 And then define the link

	 [Google]: http://google.com/

 Because link names may contain spaces, this shortcut even works For
 multiple words In the link text:

	 Visit [Daring Fireball][] for more information.

 And then define the link

 	[Daring Fireball] http://daringfireball.net/

 Link definitions can be placed anywhere In your Markdown document. I
 tend to put them immediately after each paragraph in which they're
 used, but if you want, you can put them all at the end of your
 document, sort of Like footnotes.

 Here's an example of reference links in action:

     I get 10 times more traffic from [Google] [1] than from
     [Yahoo] [2] Or [MSN] [3].

       [1] http://google.com/        "Google"
       [2]: http://search.yahoo.com/  "Yahoo Search"
       [3]: http://search.msn.com/    "MSN Search"

 Using the implicit link name shortcut, you could instead write:

     I get 10 times more traffic from [Google][] than from
     [Yahoo][] Or [MSN][].

       [google]: http://google.com/        "Google"
       [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
       [msn]:    http://search.msn.com/    "MSN Search"

 Both of the above examples will produce the following HTML output

     <p> I Get 10 times more traffic from <a href="http://google.com/"
     title="Google">Google</a> than from
     <a href = "http://search.yahoo.com/" title="Yahoo Search">Yahoo</a>
     Or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>

 For comparison, here Is the same paragraph written using
 Markdown's inline link style:

     I get 10 times more traffic from [Google](http//google.com/ "Google")
     than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") Or
     [MSN](http://search.msn.com/ "MSN Search").

 The point Of reference-style links Is Not that they're easier to
 write. The point Is that with reference-style links, your document
 source Is vastly more readable. Compare the above examples: Using
 reference-style links, the paragraph itself Is only 81 characters
 Long; With inline-style links, it's 176 characters; and as raw HTML,
 it's 234 characters. In the raw HTML, there's more markup than there
 Is text.

 With Markdown's reference-style links, a source document much more
 closely resembles the final output, As rendered In a browser. By
 allowing you To move the markup-related metadata out Of the paragraph,
 you can add links without interrupting the narrative flow Of your
 prose.
 ]]>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.Span.LinksParser.InlineLinks(System.String)">
 <summary>
 
 </summary>
 <param name="s"></param>
 <returns></returns>
 <remarks>
 This Is [an example](http//example.com/ "Title") inline link.

 [This link](http//example.net/) has no title attribute.
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.StreamWriter.HTMLWriter.Save(Microsoft.VisualBasic.MIME.Markup.HTML.HtmlDocument,System.String)">
 <summary>
 Saves the html data model into a specific text document
 </summary>
 <param name="doc"></param>
 <param name="SaveTo"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.StreamWriter.HTMLWriter.ToString(Microsoft.VisualBasic.MIME.Markup.HTML.HtmlDocument)">
 <summary>
 Generates document string from the html data model.
 </summary>
 <param name="doc"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.PlantText">
 <summary>
 单纯的文本对象
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.Markup">
 <summary>
 The markup document(*.html, *.md) its document syntax structure object. 
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.ChompingMethod">
 <summary>
 How line breaks after last non empty line in block scalar are handled.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.ChompingMethod.Clip">
 <summary>
 Keep one
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.ChompingMethod.Strip">
 <summary>
 Keep none
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.ChompingMethod.Keep">
 <summary>
 Keep all
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.YamlParser">
 <summary>
 Liu Junfeng. An almost feature complete YAML parser.
 (http://www.codeproject.com/Articles/28720/YAML-Parser-in-C?msg=4534624#xx4534624xx)
 
 YAML is a human-friendly, cross language, Unicode based data serialization language 
 designed around the common native data types of agile programming languages. 
 It is broadly useful for programming needs ranging from configuration files to 
 Internet messaging to object persistence to data auditing.
 </summary>
 <![CDATA[
 Dim input As New TextInput(richTextBoxSource.Text)

 Dim success As Boolean
 Dim parser As New YamlParser()
 Dim yamlStream As YamlStream = parser.ParseYamlStream(input, success)
 
 If success Then
     treeViewData.Nodes.Clear()
     For Each doc As YamlDocument In yamlStream.Documents
         treeViewData.Nodes.Add(YamlEmittor.CreateNode(doc.Root))
     Next
     treeViewData.ExpandAll()
     tabControl1.SelectedTab = tabPageDataTree
 Else
     MessageBox.Show(parser.GetEorrorMessages())
 End If
 ]]>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.YamlParser.IncreaseIndentIfZero">
 <summary>
 Mandatory Indentation for "non-indented" Scalar
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.YamlParser.IncreaseIndent">
 <summary>
 Increase Indent for Nested Block Collection
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.YamlParser.DecreaseIndent">
 <summary>
 Decrease Indent for Nested Block Collection
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.YAML.Grammar.YamlParser.GetEorrorMessages">
 <summary>
 获取得到解析的过程之中的错误消息
 </summary>
 <returns></returns>
</member>
</members>
</doc>
